# -*- coding: utf-8 -*-
"""Safety Helmet and Vest Detection .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dTZv353eKfnIvF_0q_Zyzo1haBQFlfsD

**Installing libraries**
"""

!pip install ultralytics
!pip install roboflow

"""**Importing libraries & modules**"""

import cv2
from ultralytics import YOLO

"""# **Reading files**"""

from google.colab import files
uploaded = files.upload()

"""**Treating with ZIP files**"""

import zipfile
import os

zip_path = "/content/Dataset.zip"  # استبدل باسم الملف
extract_path = "/content/Dataset"

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("Done")

"""**Importing model**

"""

model = YOLO("yolov8n.pt")
# test a photo
model('/content/Dataset/train/images/68_JPG_jpg.rf.c39b849685fb7b6834595d2defa5cf5b.jpg')[0].boxes
# model.names

"""**Training model on new images**"""

model.train(data = '/content/Dataset/data.yaml', epochs = 2, )

"""**Saving project on google drive**"""

from google.colab import drive
import torch

# saving model
drive.mount('/content/drive', force_remount=True) # Force remount to ensure fresh authentication
torch.save(model.state_dict(), '/content/drive/MyDrive/saved_model.pth')
# print (model.predict('/content/Capture.PNG'))

# loading model
# model.load_state_dict(torch.load('/content/drive/MyDrive/saved_model.pth'))
# model.eval()
# print (model.predict('/content/Capture.PNG'))

"""**Visualization**"""

import cv2
from ultralytics import YOLO
import matplotlib.pyplot as plt

def detect_and_show(image_path, model_path='/content/runs/detect/train/weights/best.pt'):

    model = YOLO(model_path)
    results = model(image_path)


    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    for result in results:
        for box in result.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])

            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 0, 255), 2)

            cls = int(box.cls[0])
            confidence = box.conf[0].item()
            label = f"{model.names[cls]} {confidence:.2f}"

            cv2.putText(img, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)

    plt.figure(figsize=(10, 10))
    plt.imshow(img)
    plt.axis('off')
    plt.show()

"""**Testing**"""

# Example usage
detect_and_show('/content/00268_jpg.rf.ded19b3cd686163ee7df50d442ec1b82.jpg')